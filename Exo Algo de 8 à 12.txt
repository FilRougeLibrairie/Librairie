/*
Exo 8.Dans un tableau de 10 entiers, trouver les rangs du plus petit et du plus grand élément,
et afficher les rangs et leurs valeurs.
*/

Entier	rmin, rmax
Rmin	<-	0
Rmax	<-	0
Tableau Entier Nombres [10]

Début
	Pour i allant de 1 à 9
		lire [i]
			Si nombre[i] > nombre[rmax] 
				alors rmax <- i
			FinSi
			Si nombre[i] < nombre[rmin] 
				alors rmin <- i
			FinSi
	FinPour
écrire "le plus grand entier est :" nombre[rmax]& "son rang est : " [rmax]
écrire "le plus petit entier est :" nombre[rmin]& "son rang est : " [rmin]
Fin

/*
EXO 9. DANS UN TABLEAU DE 10 ENTIERS, AFFICHER :
- LE PLUS GRAND ET SA POSITION,
- LA MOYENNE DES ENTIERS,
- LES NOMBRES INFÉRIEURS À LA MOYENNE
*/

Entier rmax,
//POUR QUE LE CALCUL SOIT POSSIBLE LE TYPE DE LA VARIABLE DOIT ÊTRE IDENTIQUE
nbrMoyenne, somme decimal
rmax <- 0 
somme = 0
tableau entier nombres[10]

Début
	Pour i allant de 1 à 9
		lire [i]
		somme = somme + nombres[i]
			Si nombres[i] > nombres[rmax] 
				alors rmax <- i
			FinSi	
	FinPour
nbrMoyenne = somme/10	
écrire "l'entier le plus grand est : " rmax & "la moyenne de ces entiers est : " nbrMoyenne
	Pour i allant de 1 à 9
		si nombres[i] < somme/10
			écrire nombres[i] "est inférieur à la moyenne" 
		Finsi
	FinPour	
Fin
	
	
/*
10. INVERSER LES ÉLÉMENTS D'UN TABLEAU DE 10 ÉLÉMENTS (SANS PASSER PAR UN TABLEAU
INTERMÉDIAIRE).
*/

entier max, min, temp
tableau entier nombres[10]
min <- nombres[0]
max <- nombres[9]

debut	
	pour i allant de 0 à nombres.longeur/2 - 1
		tant que (min < max) alors :
			temp <- max
			max <- min
			min <- temp
			min <- min + 1
			max <- max - 1
		fintantque
	FinPour
Fin

//10 Bis avec une declaration de 1 variable

entier temp
tableau entier nombres[10]

debut	
	pour i allant de 0 à nombres.longeur/2
		temp <- nombres [i]
		nombres [i] <- nombres[(nombres.longeur-1)-i]  
		//-1 car tableau de 10 et le premier element commence à 0
		nombres [nombres.longeur-i] <- temp
	FinPour
Fin
		
	
//11. TRIER UN TABLEAU DE 10 ÉLÉMENTS PAR ORDRE CROISSANT.

entier temp, min, compa
tableau entier nombres[10]
min <- i

debut
	pour i allant de 0 à 9
		compa <- i + 1 a 9
			Si compa < min alors 
				temp <- min
				min <- compa
				compa <- temp
			FinSi		
Fin


//12. FUSIONNER DEUX TABLEAUX DÉJÀ TRIÉS PAR ORDRE CROISSANT.

tableau entier vale [6]
tableau entier rossi [5]
tableau entier doctor [11]
tVale <- i
tRossi <- i
tDoctor <- i

debut
	pour i allant de 0 à rossi.longeur-1
		si tVale[i] <  tRossi[i] alors 
			tDoctor[i] <- tVale[i]
			tDoctor[i] + 1 <- tRossi[i]
			sinon
			tDoctor[i] <- tRossi[i]
			tDoctor[i]+1 <- tVale[i]
		Finsi
	FinPour
	
	si tVale(tVale.longeur-1) < tRossi(tRossi.longeur-1)
		alors tdoctor(tdoctor.longeur-1) <- tRossi(tVale.longeur-1)
		sinon tDoctor(tDoctor.longeur-1) <- tVale(tRossi.longeur-1)
	FinSi
Fin

//13.DIRE SI UNE VALEUR EXISTE DANS UN TABLEAU TRIÉ (SÉQUENTIEL, DICHOTOMIQUE).

valUtil entier
tableau entier tRossi [10]

ecrire "Veuillez entrer une valeur : "
lire valUtil

debut
	pour i allant de 0 à tRossi.longeur-1
		si valUtil = tRossi[i] 
		alors écrire "la valeur est dans le tableau !"
		sinon écrire "la valeur n'est pas dans le tableau !"
		FinSi
	FinPour
Fin

//14. CRÉER UNE CHAÎNE DE CARACTÈRES DE 50 '-'

chaine cDoctor[50]

debut	
	pour i allant de 0 à cDoctor.longeur-1
		cDoctor[i] <- "-"
	FinPour
Fin

//15. Inverser une chaîne de caractères (sans supprimer l'originale).

chaineUn caractère
chaineDeux caractère

debut
	pour i allant de 0 à chaineUn.longueur/2
		chaineUn[i] = chaineDeux[(chainedeux.longueur-1)-i]
	FinPour
Fin

//16. Remplacer tous les caractères d'une chaîne par une '*'

chaineTrois caractère

debut
	pour i allant de 0 à chaineTrois.longeur-1
		chaineTrois[i] = "*"
	FinPour
Fin

/*17 Remplacer toutes les occurrences d'une lettre par une autre dans une chaîne de
caractères.*/
chaineQuatre caractère
chaineQuatre <- "dangerdanger"

debut
	pour i allant de 0 à chaineQuatre.longueur-1
		si chaineQuatre[i] = chaineQuatre[i]
		alors chaineQuatre[i] = "m"
	FinPour
Fin

//18. Supprimer toutes les occurrences d'une lettre dans une chaîne de caractères.
chaineCinq caractère <- "abracadabra"
chaineSix caractère
present booleen
present <- faux

debut
	pour i allant de 0 à chaineCinq.longueur-1
		si chaineCinq[i] = chaineCinq [i]
		est present = faux 
		alors chaineCinq[i] = chaineSix [i]
	FinPour
Fin

		








	













	
	









 		
	
			
	
	
			
		
	
